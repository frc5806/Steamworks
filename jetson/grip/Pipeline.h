#pragma once
#include <opencv2/objdetect/objdetect.hpp>
#include <opencv2/highgui/highgui.hpp>
#include <opencv2/imgproc/imgproc.hpp>
#include <opencv2/core/core.hpp>
#include <opencv2/features2d.hpp>
#include <opencv2/core/mat.hpp>
#include <opencv2/gpu/gpu.hpp>
#include <iostream>
#include <stdio.h>
#include <stdlib.h>
#include <map>
#include <math.h>

using namespace cv;
using namespace std;

/**
* Pipeline class.
* 
* Autogenerated Pipeline from GRIP
*
* Make sure to set sources before running process()
*/
class Pipeline {
private:
    cv::cuda::GpuMat source0;
    cv::cuda::GpuMat resizeImageOutput;
    cv::cuda::GpuMat hsvThresholdOutput;
    vector<vector<Point> > findContoursOutput;
//    void resizeImage(Mat &, double , double , int , Mat &);
    void resizeImage(const cv::cuda::GpuMat &, double, double, int, cv::cuda::GpuMat &);
//    void hsvThreshold(Mat &, double [], double [], double [], Mat &);
    void hsvThreshold(const cv::cuda::GpuMat &, double [], double [], double [], cv::cuda::GpuMat &);
    void findContours(cv::cuda::GpuMat &, bool , vector<vector<Point> > &);
    void filterContours(vector<vector<Point> > &, double , double , double , double , double , double , double [], double , double , double , double , vector<vector<Point> > &);

public:
    vector<vector<Point> > filterContoursOutput;
    Pipeline();
    void Process(bool);
    void setsource0(cv::cuda::GpuMat &source0);
    cv::cuda::GpuMat* getresizeImageOutput();
    cv::cuda::GpuMat* gethsvThresholdOutput();
    vector<vector<Point> >* getfindContoursOutput();
    vector<vector<Point> >* getfilterContoursOutput();
};

